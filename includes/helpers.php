<?php

require_once 'config.php';

function search($search) {
    try {
        $db = new PDO(
            "mysql:host=" . DBHOST . ";dbname=" . DBNAME . ";charset=utf8",
            DBUSER,
            DBPASS
        );

        $encryptionKeyQuery = "SET @UNHEXEncryptionKey = UNHEX('" . ENCRYPTION_KEY . "')";
        $db->exec($encryptionKeyQuery);

        $select_query = "
            SELECT
                websites.website_name,
                websites.website_url,
                accounts.username,
                CONVERT(AES_DECRYPT(accounts.password, @UNHEXEncryptionKey) USING utf8) AS decrypted_password,
                accounts.email,
                accounts.comment
            FROM websites
            JOIN accounts ON websites.website_id = accounts.website_id
            WHERE
                websites.website_name LIKE :search
                OR websites.website_url LIKE :search
                OR accounts.username LIKE :search
                OR CONVERT(AES_DECRYPT(accounts.password, @UNHEXEncryptionKey) USING utf8) LIKE :search
                OR accounts.email LIKE :search
                OR accounts.comment LIKE :search
        ";

        $statement = $db->prepare($select_query);
        $statement->bindValue(':search', "%" . $search . "%", PDO::PARAM_STR);
        $statement->execute();

        $results = $statement->fetchAll(PDO::FETCH_ASSOC);

        if (count($results) === 0) {
            return 0;
        } else {
            echo "      <table>\n";
            echo "        <thead>\n";
            echo "          <tr>\n";

            foreach ($results[0] as $key => $value) {
                echo "            <th>" . htmlspecialchars($key) . "</th>\n";
            }

            echo "          </tr>\n";
            echo "        </thead>\n";
            echo "        <tbody>\n";

            foreach ($results as $row) {
                echo "          <tr>\n";
                foreach ($row as $key => $value) {
                    if ($key === 'decrypted_password') {
                        echo "            <td>" . ($value !== null ? htmlspecialchars($value) : 'N/A') . "</td>\n";
                    } else {
                        echo "            <td>" . htmlspecialchars($value) . "</td>\n";
                    }
                }
                echo "          </tr>\n";
            }

            echo "         </tbody>\n";
            echo "      </table>\n";
        }
    } catch (PDOException $e) {
        echo '<p>The following message was generated by function <code>search</code>:</p>' . "\n";
        echo '<p id="error">' . $e->getMessage() . '</p>' . "\n";
        echo "<p>There are a few reasons for this. Perhaps the database doesn’t exist or wasn’t mounted. Does the volume/drive containing the database have read and write permissions?</p>\n";
        echo '<p>Click <a href="./">here</a> to go back.</p>';

        exit;
    }
}

function update($table, $current_attribute, $new_value, $query_attribute, $pattern) {
    try {
        $db = new PDO(
            "mysql:host=" . DBHOST . ";dbname=" . DBNAME . ";charset=utf8",
            DBUSER,
            DBPASS
        );

        $encryptionKeyQuery = "SET @UNHEXEncryptionKey = UNHEX('" . ENCRYPTION_KEY . "')";
        $db->exec($encryptionKeyQuery);

        if ($current_attribute === 'password') {
            $update_query = "UPDATE {$table} SET {$current_attribute} = AES_ENCRYPT(:new_value, @UNHEXEncryptionKey) WHERE {$query_attribute} = :pattern";
        } else if ($query_attribute === 'password') {
            $update_query = "UPDATE {$table} SET {$current_attribute} = :new_value WHERE {$query_attribute} = AES_ENCRYPT(:pattern, @UNHEXEncryptionKey)";
        } else {
            $update_query = "UPDATE {$table} SET {$current_attribute} = :new_value WHERE {$query_attribute} = :pattern";
        }

        $statement = $db->prepare($update_query);
        $statement->bindParam(':new_value', $new_value);

        if ($current_attribute === 'password' || $query_attribute === 'password') {
            $statement->bindParam(':pattern', $pattern, PDO::PARAM_STR);
        } else {
            $statement->bindParam(':pattern', $pattern);
        }

        $statement->execute();
    } catch (PDOException $e) {
        echo '<p>The following message was generated by function <code>update</code>:</p>' . "\n";
        echo '<p id="error">' . $e->getMessage() . '</p>' . "\n";
        exit;
    }
}

function insert($website_name, $website_url, $username, $password, $email, $comment) {
    try {
        $db = new PDO(
            "mysql:host=" . DBHOST . ";dbname=" . DBNAME . ";charset=utf8",
            DBUSER,
            DBPASS
        );

        $encryptionKeyQuery = "SET @UNHEXEncryptionKey = UNHEX('" . ENCRYPTION_KEY . "')";
        $db->exec($encryptionKeyQuery);

        if (!empty($password)) {
            $encryptedPassword = "AES_ENCRYPT(:password, @UNHEXEncryptionKey)";
        } else {
            $encryptedPassword = ":password";
        }

        $insert_query = "
            INSERT INTO websites (website_name, website_url)
            VALUES (:website_name, :website_url);

            INSERT INTO accounts (website_id, username, password, email, comment)
            SELECT LAST_INSERT_ID(), :username, {$encryptedPassword}, :email, :comment;
        ";

        $statement = $db->prepare($insert_query);
        $statement->bindParam(':website_name', $website_name);
        $statement->bindParam(':website_url', $website_url);
        $statement->bindParam(':username', $username);
        $statement->bindParam(':password',$password);
        $statement->bindParam(':email', $email);
        $statement->bindParam(':comment', $comment);
        $statement->execute();
    } catch (PDOException $e) {
        echo '<p>The following message was generated by function <code>insert</code>:</p>' . "\n";
        echo '<p id="error">' . $e->getMessage() . '</p>' . "\n";
        exit;
    }
}

function delete($websiteName) {
    try {
        $db = new PDO(
            "mysql:host=" . DBHOST . ";dbname=" . DBNAME . ";charset=utf8",
            DBUSER,
            DBPASS
        );

        $deleteAccountsQuery = "DELETE FROM accounts WHERE website_id IN (SELECT website_id FROM websites WHERE website_name = :websiteName)";
        $statementAccounts = $db->prepare($deleteAccountsQuery);
        $statementAccounts->bindParam(':websiteName', $websiteName, PDO::PARAM_STR);
        $statementAccounts->execute();

        $deleteWebsitesQuery = "DELETE FROM websites WHERE website_name = :websiteName";
        $statementWebsites = $db->prepare($deleteWebsitesQuery);
        $statementWebsites->bindParam(':websiteName', $websiteName, PDO::PARAM_STR);
        $statementWebsites->execute();
    } catch (PDOException $e) {
        exit('<div id="error">An error occurred while deleting the website and accounts. Please try again.</div>'. $e->getMessage() .'</p>' . "\n");
    }
}
